{"mappings":";;;;;;;;;;;AAAA;;;;;;AEAA;;;;;AAgBO,MAAM,4CAA6D,CAAC,QAAU;IACnF,MAAM,mBAAmB,OAAO,MAAM,CAAC;IACvC,MAAM,kBAAkB,iBAAiB,MAAM,CAC7C,CAAC,QAAU,MAAM,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,MAAM,EAAE,KAAK;IAGtE,MAAM,eAAe,iBAAiB,IAAI,CAAC,CAAC,QAAU,MAAM,EAAE,KAAK,MAAM,YAAY;IAErF,MAAM,UAAE,OAAM,YAAE,SAAQ,qBAAE,kBAAiB,EAAE,GAAG,CAAA,GAAA,sBAAe,AAAD,EAAE,iBAAiB;QAC/E,CAAA,GAAA,sBAAe,AAAD,EAAE;YACd,KAAK,CAAC,QAAW,CAAA;oBACf,MAAM,MAAM,iBAAiB,CAAC,MAAM,EAAE;gBACxC,CAAA;QACF;KACD;IAED,MAAM,aAAa,CAAA,GAAA,oBAAY,EAAE;gBAC/B;sBACA;QACA,KAAK,MAAM,UAAU;QACrB,wBAAwB,MAAM,sBAAsB;IACtD;IAEA,MAAM,SAAS,CAAA,GAAA,mBAAW,EAAE;oBAC1B;QACA,aAAa,IAAI;kBACjB;2BACA;IACF;IAEA,gCAAgC;IAChC,qBAAO,gBAAC,CAAA,GAAA,kBAAW,AAAD;QAAE,QAAQ;kBAAS,MAAM,QAAQ;;AACrD;;ADhDA;;;ADsBO,MAAM,4CAAmD,CAAC,sBAC/D,iBAAC,CAAA,GAAA,0BAAmB,AAAD;;0BACjB,gBAAC,CAAA,GAAA,aAAK;gBAAE,eAAe,MAAM,aAAa;0BACxC,cAAA,gBAAC,CAAA,GAAA,yBAAkB,AAAD;8BACf,MAAM,eAAe,EAAE,IAAI,CAAC,4BAC3B,gBAAC,CAAA,GAAA,qBAAa;4BAA0B,GAAG,WAAW;2BAAjC,YAAY,IAAI;;;0BAI3C,gBAAC,CAAA,GAAA,WAAG;0BAAG,MAAM,QAAQ;;0BACrB,gBAAC,CAAA,GAAA,aAAK;YACL,CAAC,CAAC,MAAM,qBAAqB,kBAAI,gBAAC,CAAA,GAAA,qBAAa;YAC/C,CAAC,CAAC,MAAM,aAAa,kBAAI,gBAAC,CAAA,GAAA,qBAAa;;;AAIrC,MAAM,4CAAyD,CAAC,sBACrE,gBAAC,CAAA,GAAA,yCAAc,AAAD;QAAG,GAAG,MAAM,KAAK;kBAC7B,cAAA,gBAAC,CAAA,GAAA,mBAAY,AAAD;YAAG,GAAG,MAAM,YAAY;sBAClC,cAAA,gBAAC,CAAA,GAAA,0BAAmB,AAAD;gBAAG,GAAG,MAAM,QAAQ;0BACrC,cAAA,gBAAC;oBACC,eAAe,MAAM,aAAa;oBAClC,iBAAiB,OAAO;oBACxB,uBAAuB,OAAO;oBAC9B,eAAe,OAAO;8BACtB,MAAM,QAAQ","sources":["packages/next/widget-app/src/index.tsx","packages/next/widget-app/src/providers/index.ts","packages/next/widget-app/src/providers/appWagmiProvider.tsx"],"sourcesContent":["import React, { FC, PropsWithChildren, ReactNode } from 'react'\nimport { ProviderWeb3, ProviderWeb3Props } from 'reef-knot/web3-react'\n\nimport { CookiesTooltip, CookieThemeProvider, ToastContainer } from '@lidofinance/lido-ui'\nimport { Header, Main, Footer, NavigationAdaptive, NavigationLink, NavigationLinkProps } from '@lidofinance/next-widget-layout'\nimport { ProviderWalletModal, ProviderWalletModalProps } from '@lidofinance/eth-ui-wallet-modal'\n\nimport { AppWagmiConfig, AppWagmiConfigProps } from './providers'\n\nexport type WidgetAppProps = {\n  headerActions: ReactNode\n  navigationLinks?: NavigationLinkProps[] | undefined\n  disableCookiesTooltip?: boolean | undefined\n  disableToasts?: boolean | undefined\n}\n\nexport type WidgetAppEVMProps = WidgetAppProps & {\n  wagmi: AppWagmiConfigProps\n  providerWeb3: ProviderWeb3Props\n  reefKnot: ProviderWalletModalProps\n}\n\nexport const WidgetApp: FC<PropsWithChildren<WidgetAppProps>> = (props) => (\n  <CookieThemeProvider>\n    <Header headerActions={props.headerActions}>\n      <NavigationAdaptive>\n        {props.navigationLinks?.map((navLinkItem: NavigationLinkProps) => (\n          <NavigationLink key={navLinkItem.href} {...navLinkItem} />\n        ))}\n      </NavigationAdaptive>\n    </Header>\n    <Main>{props.children}</Main>\n    <Footer />\n    {!!props.disableCookiesTooltip && <CookiesTooltip />}\n    {!!props.disableToasts && <ToastContainer />}\n  </CookieThemeProvider>\n)\n\nexport const EVMWidgetApp: FC<PropsWithChildren<WidgetAppEVMProps>> = (props) => (\n  <AppWagmiConfig {...props.wagmi}>\n    <ProviderWeb3 {...props.providerWeb3}>\n      <ProviderWalletModal {...props.reefKnot}>\n        <WidgetApp\n          headerActions={props.headerActions}\n          navigationLinks={props?.navigationLinks}\n          disableCookiesTooltip={props?.disableCookiesTooltip}\n          disableToasts={props?.disableToasts}\n        >{props.children}</WidgetApp>\n      </ProviderWalletModal>\n    </ProviderWeb3>\n  </AppWagmiConfig>\n)\n","export * from './appWagmiProvider'\n","import { FC, PropsWithChildren } from 'react'\nimport { getConnectors } from 'reef-knot/core-react'\nimport { WagmiConfig, configureChains, createClient } from 'wagmi'\nimport * as wagmiChains from 'wagmi/chains'\nimport { jsonRpcProvider } from 'wagmi/providers/jsonRpc'\n\nimport { CHAINS } from '@lido-sdk/constants'\n\nexport type AppWagmiConfigProps = {\n  defaultChain: CHAINS\n  supportedChains: CHAINS[]\n  backendRPC: Record<number, string>\n  getBackendRPCPath: (chainId: CHAINS) => string\n  walletconnectProjectId: string\n}\n\nexport const AppWagmiConfig: FC<PropsWithChildren<AppWagmiConfigProps>> = (props) => {\n  const wagmiChainsArray = Object.values(wagmiChains)\n  const supportedChains = wagmiChainsArray.filter(\n    (chain) => props.supportedChains.includes(chain.id) || chain.id === 80001,\n  );\n\n  const defaultChain = wagmiChainsArray.find((chain) => chain.id === props.defaultChain)\n\n  const { chains, provider, webSocketProvider } = configureChains(supportedChains, [\n    jsonRpcProvider({\n      rpc: (chain) => ({\n        http: props.getBackendRPCPath(chain.id),\n      }),\n    }),\n  ])\n\n  const connectors = getConnectors({\n    chains,\n    defaultChain,\n    rpc: props.backendRPC,\n    walletconnectProjectId: props.walletconnectProjectId,\n  })\n\n  const client = createClient({\n    connectors,\n    autoConnect: true,\n    provider,\n    webSocketProvider,\n  })\n\n  // @ts-expect-error check client\n  return <WagmiConfig client={client}>{props.children}</WagmiConfig>\n}\n"],"names":[],"version":3,"file":"index.js.map"}