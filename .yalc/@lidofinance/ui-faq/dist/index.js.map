{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AKAA,oDAAoD;AACpD,oEAAoE;AACpE,+CAA+C;AAC/C,uEAAuE;AACvE,gEAAgE;AAChE,4DAA4D;;AAI5D,gFAAgF;AAChF,MAAM,+BAA0B,CAAA,GAAA,uBAAM,EAAE,WAAW,CAAA,GAAA,uBAAM;IAGzD,2CAAe;;;ADXR,MAAM,4CAAU,CAAA,GAAA,wCAAK,EAAE,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BlC,CAAC;;;ADrBM,MAAM,4CAA4B,CAAC;IACxC,MAAM,WAAE,OAAO,EAAE,GAAG;IAEpB,qBACE;kBACG,QAAQ,IAAI,CAAC,YAAE,QAAQ,UAAE,MAAM,EAAE,EAAE,sBAClC,gBAAC,CAAA,GAAA,gBAAQ;gBAAiB,iBAAiB,UAAU;gBAAG,SAAS,OAAO;0BACtE,cAAA,gBAAC,CAAA,GAAA,yCAAM;8BACL,cAAA,gBAAC,CAAA,GAAA,oBAAY;kCAAG;;;eAFJ;;AAQxB;;;;;;;;;;;;;;;;;;;AKrBA,MAAM,iCAAW,IAAI;AAEd,MAAM,4CAA+B,OAAO;IACjD,MAAM,WAAW;IACjB,IAAI,+BAAS,IAAI,WACf,OAAO;QAAC;QAAM,+BAAS,IAAI;KAAU;IAGvC,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,IACZ,OAAO;YAAC;YAAO;SAAK;QAGtB,qBAAqB;QACrB,kEAAkE;QAClE,mEAAmE;QACnE,yCAAyC;QACzC,wCAAwC;QACxC,MAAM,UAAU,AAAC,CAAA,MAAM,SAAS,MAAK,EAAG,QAAQ,WAAW,MAAM,QAAQ,WAAW;QAEpF,+BAAS,IAAI,UAAU;QACvB,OAAO;YAAC;YAAM;SAAQ;IACxB,EAAE,OAAO,KAAK;QACZ,OAAO;YAAC;YAAO;SAAK;IACtB;AACF;;;;;;;;;;;;;AGtBO,MAAM,4CAAiB,IAAM,CAAC,MAAY;QAC/C,MAAM,OAAO,KAAK,QAAQ,CAAC,EAAE;QAE7B,IAAI,MAAM,SAAS,QAAQ;YACzB,MAAM,OAAO,CAAA,GAAA,aAAG,EAAE,KAAK,KAAK;YAC5B,KAAK,KAAK,cAAc;YACxB,KAAK,SAAS,OAAO,GAAG;QAC1B,OACE,KAAK,KAAK,cAAc,CAAC;IAE7B;;;;;;;AFNO,MAAM,4CAAmB,OAC9B,IACA;IAEA,MAAM,OAAO,MAAM,CAAA,GAAA,cAAM,IACtB,IAAI,CAAA,GAAA,kBAAU,GACd,IAAI,CAAA,GAAA,sBAAc,GAClB,IAAI,iBAAiB,EAAE,EACvB,QAAQ;IAEX,OAAO;QAAE,SAAS,OAAO;QAAO,MAAM,KAAK;IAAK;AAClD;AAIO,MAAM,4CAAwB,OAAO;IAC1C,MAAM,QAAE,IAAI,EAAE,GAAG,MAAM,0CAAiB,IAAI;QAAC,CAAA,GAAA,sBAAc;QAAG;YAAC,CAAA,GAAA,wBAAgB;YAAG;gBAAC;aAAO;SAAC;QAAE,CAAA,GAAA,yCAAa;KAAE;IAC5G,MAAM,eAAE,cAAc,CAAC,GAAG,GAAG;IAC7B,MAAM,SAAE,QAAQ,EAAE,EAAE,GAAG;IACvB,OAAO;AACT;;;;;;","sources":["packages/ui/faq/src/index.ts","packages/ui/faq/src/components/index.ts","packages/ui/faq/src/components/faqAccordion/index.tsx","packages/ui/faq/src/components/faqAccordion/faqAccordion.tsx","packages/ui/faq/src/components/faqAccordion/styles.tsx","packages/ui/faq/styledComponentsWrapper.ts","packages/ui/faq/src/components/faqAccordion/types.ts","packages/ui/faq/src/utilsNetlifyCms/index.ts","packages/ui/faq/src/utilsNetlifyCms/fetcherNetlify.ts","packages/ui/faq/src/utilsNetlifyCms/parserNetlify.ts","packages/ui/faq/src/utilsNetlifyCms/remarkPlugins/index.ts","packages/ui/faq/src/utilsNetlifyCms/remarkPlugins/getFrontmatter.ts","packages/ui/faq/src/utilsNetlifyCms/remarkPlugins/type.ts"],"sourcesContent":["export * from './components'\nexport * from './utilsNetlifyCms'\n","export * from './faqAccordion'\n","export * from './faqAccordion'\nexport * from './styles'\nexport * from './types'\n","import React, { FC } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { Accordion } from '@lidofinance/lido-ui'\n\nimport { FAQList } from './types'\nimport { FaqItem } from './styles'\n\nexport const FaqAccordion: FC<FAQList> = (props) => {\n  const { faqList } = props\n\n  return (\n    <>\n      {faqList.map(({ question, answer }, index) => (\n        <Accordion key={question} defaultExpanded={index === 0} summary={String(question)}>\n          <FaqItem>\n            <ReactMarkdown>{answer}</ReactMarkdown>\n          </FaqItem>\n        </Accordion>\n      ))}\n    </>\n  )\n}\n","import styled from '../../../styledComponentsWrapper'\n\nexport const FaqItem = styled.div`\n  p {\n    margin: 0 0 1.6em;\n  }\n\n  p + ul,\n  p + ol,\n  ul + p,\n  ol + p {\n    margin-top: -1.6em;\n  }\n\n  ul > li,\n  ol > li {\n    margin-top: 0;\n    margin-bottom: 0;\n\n    & > p {\n      margin-top: 0;\n      margin-bottom: 0;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n","// Styled Components v5 has issues with ESM modules:\n// https://github.com/styled-components/styled-components/issues/115\n// https://github.com/rollup/rollup/issues/4438\n// It can be solved by using Styled Components v6, which is in beta ATM\n// But it will be better to stop using styled-components at all.\n// This is a temporary workaround, which seems to work well.\n\nimport _styled, { StyledInterface } from 'styled-components'\n\n// @ts-expect-error Property 'default' does not exist on type 'StyledInterface'.\nconst styled: StyledInterface = _styled.default || _styled\n\nexport * from 'styled-components'\nexport default styled\n","export type FAQItem = {\n  answer: string\n  question: string\n}\n\nexport type FAQList = {\n  faqList: FAQItem[]\n}\n","export * from './fetcherNetlify'\nexport * from './parserNetlify'\n","const cacheMap = new Map()\n\nexport const getRawDataFromNetlifyOrCache = async (url: string): Promise<[boolean, string | null]> => {\n  const cacheKey = url\n  if (cacheMap.has(cacheKey)) {\n    return [true, cacheMap.get(cacheKey)]\n  }\n\n  try {\n    const response = await fetch(url)\n\n    if (!response.ok) {\n      return [false, null]\n    }\n\n    // Temporary solution\n    // The CMS, while generating md, adds an '\\_' between the text and\n    // the link, which is then replaced by 'nbsp;' (non-breaking space)\n    // and interferes correct content display\n    // To fix this, we replace '\\_' with ' '\n    const rawData = (await response.text()).replace(/\\\\_\\[/gm, ' [').replace(/\\)\\\\_/gm, ') ')\n\n    cacheMap.set(cacheKey, rawData)\n    return [true, rawData]\n  } catch (err) {\n    return [false, null]\n  }\n}\n","import { unified, PluggableList } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkStringify from 'remark-stringify'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkDirective from 'remark-directive'\n\nimport { FAQItem } from '../components'\nimport { getFrontmatter } from './remarkPlugins'\n\nexport const parseNetlifyFile = async (\n  md: string,\n  remarkPlugins?: PluggableList,\n): Promise<{ content: string; data: Record<string, any> }> => {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkStringify)\n    .use(remarkPlugins || [])\n    .process(md)\n\n  return { content: String(file), data: file.data }\n}\n\nexport type pagesFAQ = { identification: string; faq: FAQItem[] }\n\nexport const parseNetlifyWidgetFAQ = async (md: string): Promise<pagesFAQ[]> => {\n  const { data } = await parseNetlifyFile(md, [remarkDirective, [remarkFrontmatter, ['yaml']], getFrontmatter])\n  const { frontmatter = {} } = data\n  const { pages = [] } = frontmatter\n  return pages\n}\n","export * from './getFrontmatter'\nexport * from './type'\n","import yaml from 'js-yaml'\n\nimport { Tree, VFileWithOutput } from './type'\n\n// eslint-disable-next-line unicorn/consistent-function-scoping\nexport const getFrontmatter = () => (tree: Tree, file: VFileWithOutput<null>) => {\n  const node = tree.children[0]\n\n  if (node?.type === 'yaml') {\n    const data = yaml.load(node.value)\n    file.data.frontmatter = data\n    tree.children.splice(0, 1)\n  } else {\n    file.data.frontmatter = {}\n  }\n}\n","import { Root, Parent, Content } from 'mdast'\nimport { VFileWithOutput } from 'unified'\n\nexport type Tree = Root\n\nexport type Node = Parent\n\nexport type { Content, VFileWithOutput }\n"],"names":[],"version":3,"file":"index.js.map"}